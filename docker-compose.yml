version: '3.8'

services:
  # Banco para agendamento-service
  db-agendamento:
    image: postgres:16
    container_name: db-agendamento
    environment:
      POSTGRES_DB: agendamento_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DB_AGENDAMENTO_PORT:-5433}:5432"
    volumes:
      - db_agendamento_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d agendamento_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Banco para notificacao-service
  db-notificacao:
    image: postgres:16
    container_name: db-notificacao
    environment:
      POSTGRES_DB: notificacao_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DB_NOTIFICACAO_PORT:-5434}:5432"
    volumes:
      - db_notificacao_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d notificacao_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço de agendamento de consultas
  agendamento-service:
    build:
      context: .
      dockerfile: agendamento/Dockerfile
    container_name: agendamento-service
    ports:
      - "8080:8080"
    environment:
      # Postgres do agendamento
      SPRING_DATASOURCE_URL: jdbc:postgresql://db-agendamento:5432/agendamento_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      # JWT (necessário pelo application.properties)
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    depends_on:
      db-agendamento:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Serviço de Notificações
  notificacao-service:
    build:
      context: .
      dockerfile: notification/Dockerfile
    container_name: notificacao-service
    ports:
      - "8082:8081"   # mapeia para server.port=8081 do application.properties
    environment:
      # Postgres do notificacao-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://db-notificacao:5432/notificacao_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      # RabbitMQ (sobrescreve 'localhost' do properties)
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER:-guest}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}

      # Fila de notificações (mantém igual ao properties, com option de override)
      NOTIFICACOES_QUEUE: ${NOTIFICACOES_QUEUE:-consultas.eventos}

      # JWT (necessário para o bean jwtTokenProvider)
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}

      # (opcionais) flags comuns
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"
    depends_on:
      db-notificacao:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # RabbitMQ (com painel web)
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_agendamento_data:
  db_notificacao_data:
